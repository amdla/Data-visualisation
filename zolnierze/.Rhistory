p_tree <- df %>%
filter(!is.na(`Nazwa formacji`)) %>%
count(`Nazwa formacji`) %>%
ggplot(aes(area = n, fill = n, label = `Nazwa formacji`)) +
geom_treemap() +
geom_treemap_text(color = "white", place = "center", grow = TRUE, reflow = TRUE) +
labs(title = "Proporcje żołnierzy wg formacji")
save_and_show(p_tree, "p_tree.png")
# 4. Fixed temporal distribution with proper date range
p4 <- df %>%
mutate(Data_zgonu = dmy(`Data zgonu`, quiet = TRUE),
Year = year(Data_zgonu)) %>%
filter(Year >= 1915, Year <= 1930) %>%
count(Year) %>%
ggplot(aes(x = Year, y = n)) +
geom_area(fill = "steelblue", alpha = 0.7) +
geom_line(color = "darkblue", linewidth = 1) +
geom_point(color = "red", size = 3) +
scale_x_continuous(breaks = seq(1915, 1930, 1)) +
labs(title = "Roczna liczba zgonów (1915-1930)",
x = "Rok",
y = "Liczba zgonów") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
save_and_show(p4, "p4_fixed.png")
# 5. Fixed heatmap with correct date range
p5 <- df %>%
mutate(Data_zgonu = dmy(`Data zgonu`, quiet = TRUE),
Year = year(Data_zgonu),
Month = month(Data_zgonu, label = TRUE)) %>%
filter(Year >= 1915, Year <= 1930) %>%
count(Year, Month) %>%
ggplot(aes(x = Year, y = Month, fill = n)) +
geom_tile(color = "black") +
scale_fill_gradient(low = "lightyellow", high = "darkred") +
scale_x_continuous(breaks = seq(1915, 1930, 1)) +
labs(title = "Intensywność zgonów w czasie (
# 5. Heatmap of deaths by year-month
# 5. Fixed heatmap with correct date range
p5 <- df %>%
mutate(Data_zgonu = dmy(`Data zgonu`, quiet = TRUE),
Year = year(Data_zgonu),
Month = month(Data_zgonu, label = TRUE)) %>%
filter(Year >= 1915, Year <= 1930) %>%
count(Year, Month) %>%
ggplot(aes(x = Year, y = Month, fill = n)) +
geom_tile(color = "black") +
scale_fill_gradient(low = "lightyellow", high = "darkred") +
scale_x_continuous(breaks = seq(1915, 1930, 1)) +
labs(title = "Intensywność zgonów w czasie",
x = "Rok",
y = "Miesiąc",
fill = "Liczba zgonów") +
theme(panel.grid = element_blank())
save_and_show(p5, "p5.png")
# Proxy gender from first names if applicable — otherwise skip this
df_gender <- df %>%
filter(!is.na(`Nazwa formacji`)) %>%
count(`Nazwa formacji`) %>%
slice_max(n, n = 10)
p_gender <- df_gender %>%
mutate(`Nazwa formacji` = fct_reorder(`Nazwa formacji`, n)) %>%
ggplot(aes(x = `Nazwa formacji`, y = n)) +
geom_bar(stat = "identity", fill = "lightblue") +
coord_flip() +
labs(title = "Liczba żołnierzy wg formacji (Top 10)", x = "Formacja", y = "Liczba")
save_and_show(p_gender, "p_gender.png")
p_bubble <- df %>%
filter(!is.na(`Nazwa formacji`), !is.na(`Nazwa obozu / miejsca internowania`)) %>%
count(`Nazwa formacji`, `Nazwa obozu / miejsca internowania`) %>%
mutate(across(everything(), ~str_wrap(., 25))) %>%
ggplot(aes(x = `Nazwa formacji`, y = `Nazwa obozu / miejsca internowania`, size = n)) +
geom_point(color = "skyblue", alpha = 0.7) +
scale_size_continuous(range = c(3, 15)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(
title = "Relacje między formacjami a obozami internowania",
x = "Formacja", y = "Obóz / Miejsce internowania"
)
save_and_show(p_bubble, "p_bubble.png")
df %<>% mutate(`Data zgonu` = dmy(`Data zgonu`), Rok = year(`Data zgonu`))
install.packages("UpSetR")
library(UpSetR)
upset_data <- df %>%
mutate(
Formacja = !is.na(`Nazwa formacji`),
Zgon = !is.na(`Miejsce zgonu`),
Pochowek = !is.na(`Miejsce pochówku`),
Obóz = !is.na(`Nazwa obozu / miejsca internowania`)
)
upset_matrix <- as.data.frame(upset_data[, c("Formacja", "Zgon", "Pochowek", "Obóz")])
png("p_upset.png", width = 1200, height = 800)
upset(upset_matrix, sets = c("Formacja", "Zgon", "Pochowek", "Obóz"), order.by = "freq")
df <- df %>%
mutate(`Data zgonu` = lubridate::dmy(`Data zgonu`),
Rok = lubridate::year(`Data zgonu`))
top_units <- df %>%
filter(!is.na(`Nazwa formacji`)) %>%
count(`Nazwa formacji`, sort = TRUE) %>%
slice_max(n, 6) %>%
pull(`Nazwa formacji`)
df <- df %>%
mutate(`Data zgonu` = lubridate::dmy(`Data zgonu`),
Rok = lubridate::year(`Data zgonu`))
top_units <- df %>%
filter(!is.na(`Nazwa formacji`)) %>%
count(`Nazwa formacji`, sort = TRUE) %>%
slice_max(n = 6) %>%
pull(`Nazwa formacji`)
p_bubble <- df %>%
filter(!is.na(`Nazwa formacji`), !is.na(`Nazwa obozu / miejsca internowania`)) %>%
count(`Nazwa formacji`, `Nazwa obozu / miejsca internowania`) %>%
mutate(n = as.numeric(n)) %>%
mutate(across(everything(), ~str_wrap(., 25))) %>%
ggplot(aes(x = `Nazwa formacji`, y = `Nazwa obozu / miejsca internowania`, size = n)) +
geom_point(color = "skyblue", alpha = 0.7) +
scale_size_continuous(range = c(3, 15)) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(size = 10)) +
labs(
title = "Relacje między formacjami a obozami internowania",
x = "Formacja", y = "Obóz / Miejsce internowania"
)
save_and_show(p_bubble, "p_bubble.png")
df <- df %>%
mutate(`Data zgonu` = lubridate::dmy(`Data zgonu`),
Rok = lubridate::year(`Data zgonu`))
top_units <- df %>%
filter(!is.na(`Nazwa formacji`)) %>%
count(`Nazwa formacji`, sort = TRUE) %>%
slice_max(n, 6) %>%
pull(`Nazwa formacji`)
p5 <- df %>%
mutate(Data_zgonu = dmy(`Data zgonu`, quiet = TRUE)) %>%
filter(!is.na(Data_zgonu)) %>%
mutate(Year = year(Data_zgonu),
Month = month(Data_zgonu, label = TRUE)) %>%
filter(between(Year, 1915, 1930)) %>%
count(Year, Month) %>%
complete(Year, Month, fill = list(n = 0)) %>%  # Fill missing combinations
ggplot(aes(x = factor(Year), y = Month, fill = n)) +
geom_tile(color = "black") +
scale_fill_viridis_c(option = "C") +
labs(title = "Intensywność zgonów w czasie") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
save_and_show(p5, "p5_debug.png")
# If dates are in YYYY-MM-DD format
p4 <- df %>%
mutate(Data_zgonu = ymd(`Data zgonu`, quiet = TRUE),  # Changed to ymd
Year = year(Data_zgonu)) %>%
filter(Year >= 1915, Year <= 1930) %>%
count(Year) %>%
ggplot(aes(x = Year, y = n)) +
geom_col(fill = "steelblue") +  # Simpler bar chart
scale_x_continuous(breaks = seq(1915, 1930, 1)) +
labs(title = "Roczna liczba zgonów") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
save_and_show(p4, "p4_debug.png")
# 4. Fixed temporal distribution with proper date range
p4 <- df %>%
mutate(Data_zgonu = dmy(`Data zgonu`, quiet = TRUE),
Year = year(Data_zgonu)) %>%
filter(Year >= 1815, Year <= 1930) %>%
count(Year) %>%
ggplot(aes(x = Year, y = n)) +
geom_area(fill = "steelblue", alpha = 0.7) +
geom_line(color = "darkblue", linewidth = 1) +
geom_point(color = "red", size = 3) +
scale_x_continuous(breaks = seq(1815, 1930, 1)) +
labs(title = "Roczna liczba zgonów (1915-1930)",
x = "Rok",
y = "Liczba zgonów") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
save_and_show(p4, "p4_fixed.png")
# Prepare data by year-month
time_data <- df %>%
filter(!is.na(`Data zgonu`)) %>%
mutate(YearMonth = floor_date(ymd(`Data zgonu`), unit = "month")) %>%
count(YearMonth)
p_time <- time_data %>%
ggplot(aes(x = YearMonth, y = n)) +
geom_line(size = 1) +
geom_point() +
labs(
title = "Liczba zgonów w czasie",
x = "Data (rok-miesiąc)",
y = "Liczba zgonów"
) +
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
save_and_show(p_time, "p_time.png")
heat_data <- df %>%
filter(!is.na(`Data zgonu`), !is.na(`Nazwa formacji`)) %>%
mutate(Year = year(ymd(`Data zgonu`))) %>%
count(`Nazwa formacji`, Year)
p_heat <- heat_data %>%
ggplot(aes(x = Year, y = fct_lump(`Nazwa formacji`, n = 10), fill = n)) +
geom_tile(color = "white") +
scale_fill_gradient(low = "black", high = "firebrick") +
labs(
title = "Mapa cieplna: Zgony w formacjach na przestrzeni lat",
x = "Rok",
y = "Top 10 formacji",
fill = "Liczba przypadków"
)
save_and_show(p_heat, "p_heat.png")
# 1. Time Series of Deaths (Monthly)
p4 <- df %>%
mutate(Data_zgonu = ymd(`Data zgonu`)) %>%
filter(!is.na(Data_zgonu)) %>%
mutate(YearMonth = floor_date(Data_zgonu, "month")) %>%
count(YearMonth) %>%
complete(YearMonth = seq.Date(min(YearMonth), max(YearMonth), by = "month"),
fill = list(n = 0)) %>%
ggplot(aes(x = YearMonth, y = n)) +
geom_line(color = "cyan", linewidth = 1) +
geom_point(color = "yellow", size = 2) +
labs(title = "Miesięczna liczba zgonów w czasie",
x = "Data",
y = "Liczba zgonów") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "6 months") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Heatmap of Deaths by Year-Month
p5 <- df %>%
mutate(Data_zgonu = ymd(`Data zgonu`)) %>%
filter(!is.na(Data_zgonu)) %>%
mutate(Year = year(Data_zgonu),
Month = month(Data_zgonu, label = TRUE, abbr = TRUE)) %>%
filter(Year >= 1939, Year <= 1945) %>% # Filter WWII years
count(Year, Month) %>%
ggplot(aes(x = Month, y = factor(Year), fill = n)) +
geom_tile(color = "black") +
scale_fill_gradientn(colors = brewer.pal(9, "YlOrRd"),
name = "Liczba zgonów") +
labs(title = "Liczba zgonów wg miesięcy i lat",
x = "Miesiąc",
y = "Rok") +
theme(panel.grid = element_blank())
save_and_show(p5, "p5.png")
# 2. Heatmap of Deaths by Year-Month
# Read the dataset
data <- read.csv("baza_danych_renamed.csv")
# Print column names
colnames(data)
# 2. Heatmap of Deaths by Year-Month
# Read the dataset
data <- read.csv("baza_danych_renamed.csv")
# Print values from column "Data.zgonu"
print(data[, "Data.zgonu"])
# 2. Heatmap of Deaths by Year-Month
# Read the dataset
data <- read.csv("baza_danych_renamed.csv")
library(lubridate)
# Extract year from date
years <- year(ymd(data$Data.zgonu))
# Print years (now as numeric)
print(years)
# 2. Heatmap of Deaths by Year-Month
p5 <- df %>%
mutate(Data_zgonu = ymd(`Data.zgonu`)) %>%
filter(!is.na(Data_zgonu)) %>%
mutate(Year = year(Data_zgonu),
Month = month(Data_zgonu, label = TRUE, abbr = TRUE)) %>%
filter(Year >= 1939, Year <= 1945) %>% # Filter WWII years
count(Year, Month) %>%
ggplot(aes(x = Month, y = factor(Year), fill = n)) +
geom_tile(color = "black") +
scale_fill_gradientn(colors = brewer.pal(9, "YlOrRd"),
name = "Liczba zgonów") +
labs(title = "Liczba zgonów wg miesięcy i lat",
x = "Miesiąc",
y = "Rok") +
theme(panel.grid = element_blank())
# Prepare data by year-month
time_data <- df %>%
filter(!is.na(`Data.zgonu`)) %>%
mutate(YearMonth = floor_date(ymd(`Data zgonu`), unit = "month")) %>%
count(YearMonth)
# Prepare data by year-month
time_data <- df %>%
filter(!is.na(`Data zgonu`)) %>%
mutate(YearMonth = floor_date(ymd(`Data zgonu`), unit = "month")) %>%
count(YearMonth)
p_time <- time_data %>%
ggplot(aes(x = YearMonth, y = n)) +
geom_line(size = 1) +
geom_point() +
labs(
title = "Liczba zgonów w czasie",
x = "Data (rok-miesiąc)",
y = "Liczba zgonów"
) +
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
save_and_show(p_time, "p_time.png")
View(time_data)
View(time_data)
View(p1)
# 1. Inspect unique formats and any parsing failures
library(lubridate)
# Show distinct raw date strings and flag parse failures
raw_dates <- df$`Data zgonu`
unique_dates <- unique(raw_dates)
# Try parsing and capture failures
parsed <- ymd(unique_dates, quiet = TRUE)
failure_idx <- which(is.na(parsed) & !is.na(unique_dates))
failed_values <- unique_dates[failure_idx]
cat("Failed to parse these Data zgonu values:
")
print(failed_values)
# 2. Clean whitespace and non-printable characters
cleaned <- str_trim(raw_dates)
cleaned <- stringi::stri_replace_all_regex(cleaned, "[^0-9\-]", "")
# 1. Inspect unique formats and any parsing failures
library(lubridate)
# Show distinct raw date strings and flag parse failures
raw_dates <- df$`Data zgonu`
unique_dates <- unique(raw_dates)
# Try parsing and capture failures
parsed <- ymd(unique_dates, quiet = TRUE)
failure_idx <- which(is.na(parsed) & !is.na(unique_dates))
failed_values <- unique_dates[failure_idx]
cat("Failed to parse these Data zgonu values:")
print(failed_values)
# 2. Clean whitespace and non-printable characters
cleaned <- str_trim(raw_dates)
cleaned <- stringi::stri_replace_all_regex(cleaned, "[^0-9-]", "")
# Re-parse
df <- df %>%
mutate(
Data_zgonu_clean = ymd(cleaned, quiet = FALSE)
)
# Check summary of new date column
summary(df$Data_zgonu_clean)
library(stringi)
library(dplyr)
library(lubridate)
library(stringr)
# 1. Quick inspect of the very first “bad” value, escaped so you can see what’s really in there:
raw <- df$`Data zgonu`
fails <- which(is.na(ymd(raw, quiet=TRUE)) & !is.na(raw))
head_idx <- fails[1]
cat("Raw value (as-is):\n", raw[head_idx], "\n\n")
cat("Escaped Unicode codepoints:\n",
stri_escape_unicode(raw[head_idx]), "\n")
# 2. Common culprits & fixes:
df <- df %>%
mutate(
# a) Remove any BOM or ZERO-WIDTH chars:
clean1 = str_remove_all(`Data zgonu`, "[\uFEFF\u200B]"),
# b) Replace any en-dash / em-dash with ASCII hyphen:
clean2 = str_replace_all(clean1, "[\u2013\u2014]", "-"),
# c) Strip any other non-digit/non-hyphen (in case of stray letters, spaces, etc.):
clean3 = str_replace_all(clean2, "[^0-9-]", ""),
# d) Trim leading/trailing whitespace:
clean4 = str_trim(clean3),
# e) Finally parse:
Data_zgonu_parsed = ymd(clean4, quiet = FALSE)
)
# 3. Check how many still NA vs total:
df %>%
summarize(
total = n(),
parsed = sum(!is.na(Data_zgonu_parsed)),
failed = sum(is.na(Data_zgonu_parsed))
)
## — Revised Troubleshooting for Data zgonu — ##
library(dplyr)
library(stringr)
library(stringi)
library(lubridate)
# 0. Make sure it’s character, not factor or Date:
df <- df %>% mutate(raw_date = as.character(`Data zgonu`))
# 1. Peek at the first 20 raw values and their unicode escapes:
cat("First 20 raw `Data zgonu` values:\n")
print(df$raw_date[1:20])
cat("\nEscaped code-points of any non-NA among those:\n")
bad_idx <- which(!is.na(df$raw_date[1:20]))
print(stri_escape_unicode(df$raw_date[bad_idx]))
# 2. Clean and normalize
df <- df %>%
mutate(
# a) unify slashes or dots → hyphens
clean1 = str_replace_all(raw_date, "[/\\.]", "-"),
# b) normalize any en-dash/em-dash → ascii hyphen
clean2 = str_replace_all(clean1, "[\u2013\u2014]", "-"),
# c) now strip out anything except digits and hyphens
clean3 = str_replace_all(clean2, "[^0-9\\-]", ""),
# d) trim whitespace
clean4 = str_trim(clean3),
# 3. parse: first try Y-M-D
parsed_ymd = ymd(clean4, quiet = TRUE),
#    if that fails, try D-M-Y
parsed = if_else(
is.na(parsed_ymd) & !is.na(clean4),
dmy(clean4, quiet = TRUE),
parsed_ymd
)
)
# 4. Summarize how many succeeded / failed
df %>%
summarize(
total    = n(),
parsed   = sum(!is.na(parsed)),
failed   = sum(is.na(parsed))
) %>% print()
# 5. If ‘failed’ > 0, inspect those values:
if ((n_fail <- sum(is.na(df$parsed))) > 0) {
cat("\nExamples of still‐failed strings:\n")
print(unique(df$clean4[is.na(df$parsed)] )[1:20])
}
# 6. When you’re happy, overwrite:
df <- df %>%
mutate(`Data zgonu` = parsed) %>%
select(-raw_date, -clean1, -clean2, -clean3, -clean4, -parsed_ymd, -parsed)
install.packages("ggalluvial")
# Wymagane pakiety
library(ggalluvial)
library(treemapify)
# Heatmap - zgony w podziale na miesiące i lata
p4_data <- df %>%
mutate(
year = substr(`Data zgonu`, 1, 4),
month = substr(`Data zgonu`, 6, 7)
) %>%
filter(!is.na(year), year != "", !is.na(month), month != "") %>%
count(year, month) %>%
mutate(
year = as.numeric(year),
month = factor(month.abb[as.numeric(month)], levels = month.abb)
)
p4 <- ggplot(p4_data, aes(x = year, y = month, fill = n)) +
geom_tile(color = "white", size = 0.3) +
scale_fill_gradientn(colors = brewer.pal(9, "Blues")) +
labs(title = "Liczba zgonów w poszczególnych miesiącach i latach",
x = "Rok", y = "Miesiąc") +
scale_x_continuous(breaks = seq(min(p4_data$year, na.rm = TRUE),
max(p4_data$year, na.rm = TRUE), by = 2))
```{r}
# Wymagane pakiety
library(ggalluvial)
library(treemapify)
# Heatmap - zgony w podziale na miesiące i lata
p4_data <- df %>%
mutate(
year = substr(`Data zgonu`, 1, 4),
month = substr(`Data zgonu`, 6, 7)
) %>%
filter(!is.na(year), year != "", !is.na(month), month != "") %>%
count(year, month) %>%
mutate(
year = as.numeric(year),
month = factor(month.abb[as.numeric(month)], levels = month.abb)
)
p4 <- ggplot(p4_data, aes(x = year, y = month, fill = n)) +
geom_tile(color = "white", size = 0.3) +
scale_fill_gradientn(colors = brewer.pal(9, "Blues")) +
labs(title = "Liczba zgonów w poszczególnych miesiącach i latach",
x = "Rok", y = "Miesiąc") +
scale_x_continuous(breaks = seq(min(p4_data$year, na.rm = TRUE),
max(p4_data$year, na.rm = TRUE), by = 2))
# Trendy czasowe dla głównych formacji
top_formacje <- df %>%
filter(!is.na(`Nazwa formacji`)) %>%
count(`Nazwa formacji`) %>%
slice_max(n, n = 5) %>%
pull(`Nazwa formacji`)
p5_data <- df %>%
mutate(year = substr(`Data zgonu`, 1, 4)) %>%
filter(`Nazwa formacji` %in% top_formacje, !is.na(year), year != "") %>%
count(year, `Nazwa formacji`)
p5 <- ggplot(p5_data, aes(x = year, y = n, group = `Nazwa formacji`, color = `Nazwa formacji`)) +
geom_line(size = 1.5) +
geom_point(size = 3) +
labs(title = "Trendy zgonów w czasie dla głównych formacji",
x = "Rok", y = "Liczba zgonów") +
theme(legend.position = "bottom")
save_and_show(p5, "p5.png")
# Sankey diagram - przepływ miejsc zgonu do pochówku
p6_data <- df %>%
filter(!is.na(`Miejsce zgonu`), !is.na(`Miejsce pochówku`)) %>%
count(`Miejsce zgonu`, `Miejsce pochówku`) %>%
slice_max(n, n = 20)
p6 <- ggplot(p6_data,
aes(axis1 = `Miejsce zgonu`, axis2 = `Miejsce pochówku`, y = n)) +
geom_alluvium(aes(fill = `Miejsce zgonu`), alpha = 0.8) +
geom_stratum(width = 1/3) +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), size = 3) +
scale_x_discrete(limits = c("Miejsce zgonu", "Miejsce pochówku"), expand = c(.1, .1)) +
labs(title = "Związek między miejscem zgonu a miejscem pochówku") +
theme_void()
save_and_show(p6, "p6.png")
# Treemap - rozkład formacji
p7_data <- df %>%
filter(!is.na(`Nazwa formacji`)) %>%
count(`Nazwa formacji`)
p7 <- ggplot(p7_data, aes(area = n, fill = n, label = paste(`Nazwa formacji`, n, sep = "\n"))) +
geom_treemap() +
geom_treemap_text(color = "white", place = "centre") +
scale_fill_gradientn(colors = brewer.pal(9, "Greens")) +
labs(title = "Rozkład liczby żołnierzy według formacji")
save_and_show(p7, "p7.png")
# Treemap - rozkład formacji
p7_data <- df %>%
filter(!is.na(`Nazwa formacji`)) %>%
count(`Nazwa formacji`)
p7 <- ggplot(p7_data, aes(area = n, fill = n, label = paste(`Nazwa formacji`, n, sep = "\n"))) +
geom_treemap() +
geom_treemap_text(color = "white", place = "centre") +
scale_fill_gradientn(colors = brewer.pal(9, "Greens")) +
labs(title = "Rozkład liczby żołnierzy według formacji")
save_and_show(p7, "p7.png")
